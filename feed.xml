<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://etemesi254.github.io//</id><title>shaded</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2024-07-27T17:09:38+00:00</updated> <author> <name>Caleb</name> <uri>https://etemesi254.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://etemesi254.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://etemesi254.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 Caleb </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>The architecture of Pixly - A simple image editor in Kotlin + Rust</title><link href="https://etemesi254.github.io//posts/Pixly-Image/" rel="alternate" type="text/html" title="The architecture of Pixly - A simple image editor in Kotlin + Rust" /><published>2024-01-15T07:00:00+00:00</published> <updated>2024-01-15T07:00:00+00:00</updated> <id>https://etemesi254.github.io//posts/Pixly-Image/</id> <content src="https://etemesi254.github.io//posts/Pixly-Image/" /> <author> <name>Caleb</name> </author> <category term="architecture" /> <category term="kotlin" /> <category term="multiplatform" /> <category term="rust" /> <summary> Photo of tree by Colin Watts on Unsplash Pixly is an image editor for Android and Desktop platforms that uses Compose and Rust to achieve a simple image editing experience. It provides a GUI/Frontend to my other toy project zune-image, a high perfomance library for decoding processing and encoding various image formats. It has the features you’d expect from a simple editor, like history, ... </summary> </entry> <entry><title>Zune benchmarks</title><link href="https://etemesi254.github.io//posts/Zune-Benchmarks/" rel="alternate" type="text/html" title="Zune benchmarks" /><published>2022-10-30T07:00:00+00:00</published> <updated>2024-07-27T17:09:01+00:00</updated> <id>https://etemesi254.github.io//posts/Zune-Benchmarks/</id> <content src="https://etemesi254.github.io//posts/Zune-Benchmarks/" /> <author> <name>Caleb</name> </author> <category term="optimizations" /> <summary> This contains a permalink to the zune library benchmarks, reports provided by criterion Currently, benchmarks are ran on my machine, but will hopefully soon move to a cloud provider Machine Specs Feature Value Model name AMD Ryzen 5 4500U with Radeon Graphics CPU family 23 Model 96 Th... </summary> </entry> <entry><title>Transposing matrices, The Fast way.</title><link href="https://etemesi254.github.io//posts/Transposing-Matrices/" rel="alternate" type="text/html" title="Transposing matrices, The Fast way." /><published>2022-10-30T07:00:00+00:00</published> <updated>2022-10-30T07:00:00+00:00</updated> <id>https://etemesi254.github.io//posts/Transposing-Matrices/</id> <content src="https://etemesi254.github.io//posts/Transposing-Matrices/" /> <author> <name>Caleb</name> </author> <category term="optimizations" /> <summary> Matrix transposition is one of the most common things computers do as this operation creeps itself into many day-to-day computer operations From optimized 1D convolution kernels that make gaussian blurs possible to optimized matrix multiply algorithms that are the heart of many machine learning operations, it is safe to say this operation has received adequate research The naive way to tran... </summary> </entry> <entry><title>Google Summer of Code Writeup - Adding HTJ2K to FFmpeg</title><link href="https://etemesi254.github.io//posts/Google-Summer-Of-Code-Writeup/" rel="alternate" type="text/html" title="Google Summer of Code Writeup - Adding HTJ2K to FFmpeg" /><published>2022-09-09T07:00:00+00:00</published> <updated>2022-09-09T07:00:00+00:00</updated> <id>https://etemesi254.github.io//posts/Google-Summer-Of-Code-Writeup/</id> <content src="https://etemesi254.github.io//posts/Google-Summer-Of-Code-Writeup/" /> <author> <name>Caleb</name> </author> <category term="gsoc-2022" /> <summary> The patch that was submitted to ffmpeg can be viewed here A working ffmpeg implementation used to produce image samples can be found here The recently concluded Google Summer of Code program saw me participating in adding a high-throughput jpeg2000 decoder for ffmpeg and this is my writeup on experiences gained during that period. Background and motivation Jpeg2000 came out almost t... </summary> </entry> <entry><title>Pilot</title><link href="https://etemesi254.github.io//posts/Pilot/" rel="alternate" type="text/html" title="Pilot" /><published>2022-03-07T07:00:00+00:00</published> <updated>2022-03-07T07:00:00+00:00</updated> <id>https://etemesi254.github.io//posts/Pilot/</id> <content src="https://etemesi254.github.io//posts/Pilot/" /> <author> <name>Caleb</name> </author> <category term="compression" /> <summary> So, in spirit of getting out of my comfort zone, I’m gonna try something new. Im gonna write a lossless compressor and decompressor, probably won’t be as cool as zstd, or as impressive as Oodle SDKS and definitely not as used as zlib But it’s a good learning experience. That’s enough to go by. BTW it’s in Rust </summary> </entry> </feed>
